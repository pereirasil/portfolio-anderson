import Groq from 'groq-sdk';
import { createWorker } from 'tesseract.js';

// Configura√ß√£o do Groq (IA Gratuita)
const groq = new Groq({
  apiKey: process.env.REACT_APP_GROQ_API_KEY,
  dangerouslyAllowBrowser: true // Necess√°rio para usar no browser
});

// Fun√ß√£o para extrair texto de imagem usando OCR
export const extrairTextoDeImagem = async (imagemFile) => {
  try {
    const worker = await createWorker('por+eng'); // Portugu√™s e Ingl√™s
    
    const { data: { text } } = await worker.recognize(imagemFile);
    await worker.terminate();
    
    // Limpa o texto extra√≠do
    const textoLimpo = text
      .replace(/\n+/g, '\n') // Remove quebras de linha excessivas
      .replace(/\s+/g, ' ') // Remove espa√ßos excessivos
      .trim();
    
    return {
      sucesso: true,
      texto: textoLimpo,
      erro: null
    };
  } catch (error) {
    console.error('Erro no OCR:', error);
    return {
      sucesso: false,
      texto: '',
      erro: 'Erro ao processar a imagem. Tente com uma imagem mais n√≠tida.'
    };
  }
};

// Sistema de an√°lise local inteligente como fallback
const analisarContextoLocal = (conversa) => {
  const linhas = conversa.split('\n').filter(linha => linha.trim());
  const ultimaMensagemDela = linhas[linhas.length - 1]?.toLowerCase() || '';
  
  // An√°lise mais sofisticada do contexto
  const contextos = {
    trabalho: ['trabalho', 'emprego', 'profiss√£o', 'carreira', 'escrit√≥rio', 'chefe', 'colega', 'reuni√£o'],
    viagem: ['viagem', 'viajar', 'praia', 'pa√≠s', 'cidade', 'turismo', 'f√©rias', 'aventura'],
    entretenimento: ['m√∫sica', 'filme', 's√©rie', 'livro', 'netflix', 'spotify', 'cinema', 'show'],
    lazer: ['fim de semana', 'tempo livre', 'hobby', 'esporte', 'academia', 'parque', 'divers√£o'],
    sentimentos: ['feliz', 'triste', 'cansada', 'animada', 'preocupada', 'estressada', 'relaxando'],
    estudos: ['faculdade', 'universidade', 'curso', 'prova', 'estudo', 'formatura', 'aula'],
    familia: ['fam√≠lia', 'm√£e', 'pai', 'irm√£o', 'irm√£', 'av√≥', 'av√¥', 'cachorro', 'gato'],
    comida: ['comida', 'restaurante', 'cozinhar', 'receita', 'pizza', 'caf√©', 'jantar', 'almo√ßo']
  };
  
  let contextoDetectado = 'geral';
  let pontuacaoMaxima = 0;
  
  Object.entries(contextos).forEach(([categoria, palavras]) => {
    const pontuacao = palavras.reduce((acc, palavra) => {
      return acc + (ultimaMensagemDela.includes(palavra) ? 1 : 0);
    }, 0);
    
    if (pontuacao > pontuacaoMaxima) {
      pontuacaoMaxima = pontuacao;
      contextoDetectado = categoria;
    }
  });
  
  return { contexto: contextoDetectado, intensidade: pontuacaoMaxima };
};

// Sugest√µes contextualmente inteligentes
const gerarSugestoesContextuais = (contexto, ultimaMensagem) => {
  const sugestoesPorContexto = {
    trabalho: [
      "Que interessante! O que voc√™ mais gosta no seu trabalho?",
      "Parece que voc√™ √© dedicada! Isso √© muito atrativo üòä",
      "Deve ser desafiador! Como voc√™ consegue equilibrar trabalho e vida pessoal?",
      "Que √°rea legal! Voc√™ sempre quis trabalhar com isso?"
    ],
    viagem: [
      "Que demais! Adoro pessoas aventureiras. Qual foi sua viagem mais marcante?",
      "Voc√™ tem esp√≠rito explorador! Qual o pr√≥ximo destino dos sonhos?",
      "Viagem √© tudo! Me conta mais sobre essa experi√™ncia üòÑ",
      "Que lugar incr√≠vel! Voc√™ gosta mais de praia ou montanha?"
    ],
    entretenimento: [
      "Temos gostos parecidos! Qual sua recomenda√ß√£o do momento?",
      "Adoro conversar sobre isso! Qual seu g√™nero favorito?",
      "Que bom gosto! Voc√™ me parece ter uma personalidade interessante üòä",
      "Legal! Voc√™ √© mais de maratonar ou assistir um por vez?"
    ],
    lazer: [
      "Que legal! Voc√™ sabe aproveitar a vida üòÑ",
      "Adoro pessoas que t√™m hobbies interessantes! Me conta mais",
      "Isso √© muito legal! Voc√™ poderia me ensinar algum dia?",
      "Parece divertido! Como voc√™ descobriu essa paix√£o?"
    ],
    sentimentos: [
      "Entendo perfeitamente! Como voc√™ costuma lidar com isso?",
      "Voc√™ √© muito transparente, isso √© uma qualidade rara üòä",
      "Imagino! O que te ajuda a se sentir melhor?",
      "Que bom que voc√™ compartilhou isso comigo!"
    ],
    estudos: [
      "Que dedicada! O que voc√™ est√° estudando?",
      "Admiro pessoas focadas nos estudos! Qual sua √°rea?",
      "Que legal! Voc√™ sempre foi boa estudante?",
      "Interessante! O que te motivou a escolher esse curso?"
    ],
    familia: [
      "Que fofo! A fam√≠lia √© tudo mesmo üòä",
      "Voc√™ parece ser uma pessoa carinhosa com quem ama!",
      "Que legal! Fam√≠lia unida √© uma ben√ß√£o",
      "Isso √© muito importante! Voc√™s s√£o pr√≥ximos?"
    ],
    comida: [
      "Que del√≠cia! Voc√™ gosta de cozinhar ou prefere sair para comer?",
      "Adoro pessoas que sabem apreciar uma boa comida! üòÑ",
      "Interessante! Qual sua comida favorita?",
      "Voc√™ me parece ter bom gosto! Conhece algum lugar legal?"
    ],
    geral: [
      "Que interessante! Me conta mais sobre isso üòä",
      "Adoro sua forma de ver as coisas! Voc√™ parece ser uma pessoa incr√≠vel",
      "Nossa, que legal! Voc√™ tem uma personalidade muito atrativa",
      "Fico feliz em conhecer algu√©m assim! O que mais te deixa feliz na vida?"
    ]
  };
  
  return sugestoesPorContexto[contexto] || sugestoesPorContexto.geral;
};

// Fun√ß√£o principal para gerar sugest√µes com IA
export const gerarSugestoesComIA = async (conversa) => {
  // Primeira tentativa: Groq (IA Gratuita)
  if (process.env.REACT_APP_GROQ_API_KEY && process.env.REACT_APP_GROQ_API_KEY !== 'your_groq_api_key_here') {
    try {
      const prompt = `
Voc√™ √© um especialista em relacionamentos que ajuda homens a conversar de forma respeitosa e aut√™ntica com mulheres.

Analise esta conversa e gere 3-4 sugest√µes de resposta que sejam:
- Respeitosas e genu√≠nas
- Que mantenham o interesse dela
- Que fa√ßam perguntas envolventes
- Que mostrem interesse real pela pessoa
- Que sejam naturais e n√£o robotizadas

Conversa:
${conversa}

Formate a resposta como um array JSON de strings, exemplo:
["sugest√£o 1", "sugest√£o 2", "sugest√£o 3"]

IMPORTANTE: Responda APENAS com o array JSON, sem explica√ß√µes extras.
`;

      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: "user",
            content: prompt
          }
        ],
        model: "llama3-8b-8192", // Modelo gratuito da Groq
        temperature: 0.7,
        max_tokens: 1000,
      });

      const resposta = completion.choices[0]?.message?.content?.trim();
      
      // Tenta fazer parse do JSON
      try {
        const sugestoes = JSON.parse(resposta);
        if (Array.isArray(sugestoes) && sugestoes.length > 0) {
          return {
            sucesso: true,
            sugestoes: sugestoes,
            fonte: 'Groq AI'
          };
        }
      } catch (e) {
        console.log('Erro ao fazer parse da resposta da IA:', e);
      }
      
    } catch (error) {
      console.log('Erro na API Groq:', error.message);
    }
  }
  
  // Fallback: An√°lise local inteligente
  const analise = analisarContextoLocal(conversa);
  const linhas = conversa.split('\n').filter(linha => linha.trim());
  const ultimaMensagem = linhas[linhas.length - 1] || '';
  
  const sugestoes = gerarSugestoesContextuais(analise.contexto, ultimaMensagem);
  
  return {
    sucesso: true,
    sugestoes: sugestoes.slice(0, 4),
    fonte: 'An√°lise Local Inteligente',
    contexto: analise.contexto
  };
};

// Fun√ß√£o para verificar se a API est√° configurada
export const verificarConfiguracaoIA = () => {
  const groqKey = process.env.REACT_APP_GROQ_API_KEY;
  
  return {
    groqConfigured: groqKey && groqKey !== 'your_groq_api_key_here',
    recommendation: !groqKey || groqKey === 'your_groq_api_key_here' 
      ? 'Configure sua chave Groq gratuita em https://console.groq.com/keys'
      : 'IA configurada com sucesso!'
  };
}; 

// Fun√ß√£o para conversar com a IA como especialista em relacionamentos
export const conversarComIA = async (historicoConversa) => {
  console.log('ü§ñ [DEBUG] Iniciando conversa com IA:', historicoConversa);
  
  // Monta o contexto da conversa
  const contextoConversa = historicoConversa
    .slice(-10) // √öltimas 10 mensagens para manter contexto sem sobrecarregar
    .map(msg => `${msg.autor}: ${msg.texto}`)
    .join('\n');

  // Primeira tentativa: Groq (IA Gratuita)
  const groqKey = process.env.REACT_APP_GROQ_API_KEY;
  
  if (groqKey && groqKey !== 'your_groq_api_key_here') {
    try {
      console.log('üöÄ [DEBUG] Usando Groq para conversa...');
      
      const prompt = `Voc√™ √© uma especialista em relacionamentos e conquista amorosa. Sua miss√£o √© ajudar homens a se relacionarem de forma respeitosa, aut√™ntica e eficaz com mulheres.

PERSONALIDADE:
- Amig√°vel e encorajadora
- D√° conselhos pr√°ticos e diretos
- Usa exemplos reais quando poss√≠vel
- Promove sempre o respeito e autenticidade
- Tem um tom caloroso mas profissional
- Usa emojis moderadamente para ser mais humana

ESPECIALIDADES:
- Iniciar conversas (online e pessoalmente)
- Manter o interesse feminino
- Linguagem corporal e comunica√ß√£o
- Primeiros encontros
- Lidar com rejei√ß√µes
- Autoconfian√ßa e desenvolvimento pessoal
- Relacionamentos saud√°veis

IMPORTANTE:
- SEMPRE promova o respeito e consentimento
- NUNCA apoie comportamentos t√≥xicos ou manipulativos
- Encoraje autenticidade ao inv√©s de "joguinhos"
- Foque em desenvolvimento pessoal real

Conversa atual:
${contextoConversa}

Responda de forma natural, como uma amiga especialista que realmente se importa em ajudar. Seja espec√≠fica e d√™ conselhos pr√°ticos.`;

      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: prompt
          },
          {
            role: "user", 
            content: historicoConversa[historicoConversa.length - 1]?.texto || "Ol√°!"
          }
        ],
        model: "llama3-8b-8192",
        temperature: 0.8,
        max_tokens: 800,
      });

      const resposta = completion.choices[0]?.message?.content?.trim();
      
      if (resposta) {
        console.log('‚úÖ [DEBUG] Resposta Groq recebida');
        return {
          sucesso: true,
          resposta: resposta
        };
      }
      
    } catch (error) {
      console.log('‚ùå [DEBUG] Erro na API Groq para conversa:', error.message);
    }
  }
  
  // Fallback: Respostas locais inteligentes
  console.log('üîß [DEBUG] Usando respostas locais para conversa...');
  
  const ultimaMensagem = historicoConversa[historicoConversa.length - 1]?.texto?.toLowerCase() || '';
  
  // An√°lise da inten√ß√£o da pergunta
  const respostasContextuais = {
    iniciarConversa: [
      "Para iniciar uma conversa, o segredo √© ser genu√≠no! üòä Comente algo espec√≠fico do perfil dela ou do contexto onde voc√™s se encontraram. Por exemplo: 'Vi que voc√™ gosta de [hobby], que legal! Como come√ßou nessa √°rea?' √â muito melhor que um 'oi' gen√©rico.",
      "A primeira impress√£o √© tudo! Comece com algo que mostre que voc√™ prestou aten√ß√£o nela. Se for online, mencione algo das fotos ou bio dela. Se for pessoalmente, um elogio sincero sobre algo que ela escolheu usar sempre funciona bem.",
      "O melhor starter √© sempre uma pergunta interessante! Evite 'tudo bem?' e v√° para algo como 'qual foi o highlight do seu fim de semana?' ou comente algo do ambiente onde voc√™s est√£o. Isso gera conversa de verdade!"
    ],
    naoResponde: [
      "Se ela n√£o est√° respondendo, respire fundo! üòå Pode ser que ela esteja ocupada ou n√£o viu ainda. N√£o mande v√°rias mensagens seguidas - isso pode parecer desesperado. Aguarde pelo menos 2-3 dias antes de tentar novamente com algo diferente.",
      "Paci√™ncia √© fundamental! Mulheres recebem muitas mensagens, ent√£o n√£o leve para o pessoal imediatamente. Se j√° faz mais de uma semana, voc√™ pode tentar uma √∫ltima vez com algo engra√ßado ou interessante. Se ainda assim n√£o responder, √© hora de seguir em frente.",
      "√Äs vezes o timing n√£o est√° certo. Ela pode estar passando por algo pessoal, muito ocupada no trabalho, ou simplesmente n√£o estar no mood para conversas novas. N√£o insista - foque sua energia em outras conex√µes!"
    ],
    chamarSair: [
      "Para chamar para sair, seja espec√≠fico e confiante! üí™ Ao inv√©s de 'quer sair algum dia?', tente: 'Que tal tomarmos um caf√© s√°bado √† tarde? Conhe√ßo um lugar legal no [local]'. Isso mostra iniciativa e facilita para ela dizer sim ou sugerir outro hor√°rio.",
      "O segredo √© fazer o convite parecer natural na conversa. Se voc√™s estavam falando sobre caf√©, diga: 'Adoraria continuar essa conversa pessoalmente, que tal aquela cafeteria que voc√™ mencionou?' Assim fica org√¢nico!",
      "Timing √© tudo! N√£o chame para sair na primeira conversa (a menos que seja uma conex√£o incr√≠vel). Esperem voc√™s trocarem algumas mensagens e criarem um rapport. A√≠ sim, convide para algo casual como caf√© ou almo√ßo primeiro."
    ],
    nervosismo: [
      "Nervosismo antes do encontro √© super normal! üòÖ A melhor forma de lidar √© se preparar: pense em alguns t√≥picos de conversa interessantes, escolha um lugar onde voc√™ se sinta confort√°vel, e lembre-se que ela tamb√©m pode estar nervosa!",
      "Transforme o nervosismo em empolga√ß√£o! Voc√™ est√° conhecendo algu√©m novo e interessante - isso √© incr√≠vel! Pratique respira√ß√£o profunda, chegue alguns minutos mais cedo para se ambientar, e lembre-se: seja voc√™ mesmo, √© isso que ela quer conhecer.",
      "Alguns truques que funcionam: tome um banho relaxante antes, use uma roupa que te deixe confiante, chegue no local um pouco antes para escolher a mesa, e tenha um plano B caso a conversa trave (perguntas sobre hobbies, viagens, fam√≠lia sempre salvam!)."
    ],
    autoconfianca: [
      "Autoconfian√ßa vem de dentro para fora! üí™ Comece cuidando de voc√™: exercite-se, cuide da apar√™ncia, desenvolva seus hobbies e interesses. Quando voc√™ est√° bem consigo mesmo, isso transparece naturalmente nas intera√ß√µes.",
      "Lembre-se: voc√™ tem valor √∫nico para oferecer! Foque nas suas qualidades positivas, nas suas conquistas, nos seus sonhos. Mulheres s√£o atra√≠das por homens que t√™m prop√≥sito e paix√£o pela vida.",
      "Pratique em situa√ß√µes de baixo risco: converse com caixas, atendentes, pessoas aleat√≥rias no dia a dia. Isso treina suas habilidades sociais e aumenta sua confian√ßa gradualmente. Cada pequena intera√ß√£o positiva constr√≥i sua autoestima!"
    ],
    geral: [
      "Que pergunta interessante! üòä Relacionamentos s√£o sobre conex√£o genu√≠na. O mais importante √© sempre ser aut√™ntico, respeitoso e mostrar interesse real pela pessoa. Que aspecto espec√≠fico te preocupa mais?",
      "Estou aqui para ajudar! üí™ Cada situa√ß√£o √© √∫nica, ent√£o quanto mais detalhes voc√™ me der sobre sua situa√ß√£o espec√≠fica, melhor posso te orientar. O que exatamente voc√™ gostaria de saber?",
      "√ìtima pergunta! O segredo do sucesso nos relacionamentos √© sempre tratar a outra pessoa com respeito e interesse genu√≠no. Pode me contar mais sobre sua situa√ß√£o espec√≠fica para eu te dar conselhos mais direcionados?"
    ]
  };
  
  // Detecta a inten√ß√£o da pergunta
  let categoria = 'geral';
  
  if (ultimaMensagem.includes('iniciar') || ultimaMensagem.includes('come√ßar') || ultimaMensagem.includes('primeira')) {
    categoria = 'iniciarConversa';
  } else if (ultimaMensagem.includes('n√£o responde') || ultimaMensagem.includes('ignorando') || ultimaMensagem.includes('sil√™ncio')) {
    categoria = 'naoResponde';
  } else if (ultimaMensagem.includes('chamar') || ultimaMensagem.includes('convite') || ultimaMensagem.includes('sair')) {
    categoria = 'chamarSair';
  } else if (ultimaMensagem.includes('nervoso') || ultimaMensagem.includes('ansioso') || ultimaMensagem.includes('medo')) {
    categoria = 'nervosismo';
  } else if (ultimaMensagem.includes('confian√ßa') || ultimaMensagem.includes('autoestima') || ultimaMensagem.includes('inseguro')) {
    categoria = 'autoconfianca';
  }
  
  // Seleciona uma resposta aleat√≥ria da categoria
  const respostas = respostasContextuais[categoria];
  const respostaEscolhida = respostas[Math.floor(Math.random() * respostas.length)];
  
  return {
    sucesso: true,
    resposta: respostaEscolhida
  };
}; 