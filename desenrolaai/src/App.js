import React, { useState } from 'react';
import './App.css';
import { gerarSugestoesComIA, verificarConfiguracaoIA, extrairTextoDeImagem, conversarComIA } from './services/aiService';

const mensagensData = {
  primeiras: [
    "Oi! Vi seu perfil e achei sua energia incr√≠vel. Como foi seu dia?",
    "Ol√°! Suas fotos me chamaram aten√ß√£o, principalmente aquela em [local]. Voc√™ gosta de viajar?",
    "Oi! Notei que voc√™ gosta de [hobby/interesse]. Eu tamb√©m sou f√£! Qual foi sua √∫ltima experi√™ncia com isso?",
    "Ol√°! Seu sorriso √© contagiante. O que te deixa assim t√£o feliz na vida?",
    "Oi! Vi que voc√™ curte [m√∫sica/filme/s√©rie]. Temos gostos parecidos! Qual sua recomenda√ß√£o do momento?"
  ],
  elogios: [
    "Seus olhos t√™m um brilho especial que me chamou aten√ß√£o desde a primeira foto",
    "Adoro como voc√™ parece ser uma pessoa aut√™ntica e verdadeira",
    "Sua energia positiva transparece em cada foto. √â muito atrativo!",
    "Voc√™ tem um estilo √∫nico que combina muito com sua personalidade",
    "O jeito como voc√™ sorri mostra que deve ser uma pessoa incr√≠vel de se conhecer"
  ],
  perguntas: [
    "Se pudesse viajar para qualquer lugar do mundo agora, onde seria?",
    "Qual foi a √∫ltima coisa que te fez rir muito?",
    "O que voc√™ mais gosta de fazer nos fins de semana?",
    "Tem algum hobby ou paix√£o que poucas pessoas sabem sobre voc√™?",
    "Se pudesse jantar com qualquer pessoa (viva ou n√£o), quem seria e por qu√™?"
  ],
  quebragelo: [
    "Pergunta importante: voc√™ √© team doce ou team salgado? ü§î",
    "Confesso que vim aqui s√≥ para perguntar... pineapple na pizza: crime ou genialidade? üçï",
    "Ei, preciso da sua opini√£o de especialista: qual o melhor filme da Disney? √â para uma pesquisa... cient√≠fica üòÑ",
    "Quest√£o filos√≥fica: por que chamam de 'rush hour' se ningu√©m consegue correr? üöó",
    "Me ajuda numa d√∫vida: por que decidimos que apertar snooze 5 vezes √© melhor que dormir 30 minutos a mais? ‚è∞"
  ],
  flertes: [
    "Tenho que confessar... voc√™ tem o dom de fazer algu√©m sorrir s√≥ de ver suas fotos ‚ú®",
    "Danger zone: seus olhos s√£o meio perigosos para quem est√° tentando se concentrar no trabalho üòè",
    "Aviso: conversar contigo est√° se tornando o melhor parte do meu dia üí´",
    "Curiosidade: voc√™ sempre foi assim encantadora ou √© talento natural? üòä",
    "Plot twist: vim aqui procurar memes e acabei encontrando algu√©m interessante demais üíï"
  ],
  encerrar: [
    "Foi muito bom conversar contigo! Espero que tenha um dia incr√≠vel! ‚ú®",
    "Adorei nosso papo! Mesmo que nossos caminhos sejam diferentes, desejo tudo de bom pra voc√™ üí´",
    "Obrigado pela conversa! Voc√™ √© uma pessoa legal e tenho certeza que encontrar√° algu√©m incr√≠vel üòä",
    "Foi um prazer te conhecer! Que voc√™ tenha muitas alegrias pela frente! üåü",
    "Gostei muito de conversar contigo. Desejo muito sucesso e felicidade! At√© mais! üëã"
  ]
};

const exemploConversa = {
  "Oi! Vi seu perfil e achei sua energia incr√≠vel. Como foi seu dia?": [
    { tipo: 'ele', mensagem: "Oi! Vi seu perfil e achei sua energia incr√≠vel. Como foi seu dia?" },
    { tipo: 'ela', mensagem: "Oi! Obrigada üòä Foi um dia corrido no trabalho, mas agora estou relaxando. E o seu?" },
    { tipo: 'ele', mensagem: "Que bom que conseguiu relaxar! O meu foi tranquilo, passei o dia trabalhando tamb√©m. O que voc√™ faz?" },
    { tipo: 'ela', mensagem: "Sou designer gr√°fica. Amo o que fa√ßo! E voc√™?" },
    { tipo: 'ele', mensagem: "Que legal! Deve ser bem criativo. Eu trabalho com marketing digital. Adoro a √°rea criativa tamb√©m!" },
    { tipo: 'ela', mensagem: "Nossa, temos algo em comum ent√£o! Marketing e design andam sempre juntos üòÑ" },
    { tipo: 'ele', mensagem: "Exato! Vi que voc√™ gosta de viajar. Qual foi sua √∫ltima aventura?" },
    { tipo: 'ela', mensagem: "Fui para Portugal m√™s passado! Foi incr√≠vel. Voc√™ gosta de viajar tamb√©m?" },
    { tipo: 'ele', mensagem: "Adoro! Portugal est√° na minha lista. Que cidade voc√™ mais gostou l√°?" },
    { tipo: 'ela', mensagem: "Porto me conquistou totalmente! A arquitetura, a comida... tudo perfeito!" },
    { tipo: 'ele', mensagem: "Deve ter sido amazing! Voc√™ parece ter muito bom gosto para lugares. Que tal trocarmos mais experi√™ncias de viagem pessoalmente? Conhece algum caf√© legal por aqui?" },
    { tipo: 'ela', mensagem: "Seria √≥timo! Tem uma cafeteria nova no centro que eu quero conhecer. Que tal s√°bado √† tarde?" },
    { tipo: 'ele', mensagem: "Perfeito! S√°bado √†s 15h te serve? Posso pegar seu n√∫mero para combinarmos os detalhes?" },
    { tipo: 'ela', mensagem: "Claro! √â (11) 99999-9999. Estou ansiosa para conhecer voc√™ pessoalmente! üòä" },
    { tipo: 'ele', mensagem: "Eu tamb√©m! Vou te mandar uma mensagem amanh√£ para confirmarmos. Tenha uma √≥tima noite! ‚ú®" }
  ],
  // Exemplo gen√©rico para outras mensagens
  "generico": [
    { tipo: 'ele', mensagem: "[Sua mensagem escolhida]" },
    { tipo: 'ela', mensagem: "Oi! Que fofo, obrigada pela mensagem üòä" },
    { tipo: 'ele', mensagem: "Como voc√™ est√° hoje?" },
    { tipo: 'ela', mensagem: "Estou bem! Trabalhando, mas sempre bom receber uma mensagem legal" },
    { tipo: 'ele', mensagem: "Que bom! O que voc√™ faz?" },
    { tipo: 'ela', mensagem: "Trabalho com [√°rea]. E voc√™?" },
    { tipo: 'ele', mensagem: "Trabalho com [sua √°rea]. Vi nas suas fotos que voc√™ gosta de [hobby/interesse]" },
    { tipo: 'ela', mensagem: "Sim! Adoro mesmo. Voc√™ tamb√©m curte?" },
    { tipo: 'ele', mensagem: "Tenho interesse! Voc√™ poderia me ensinar melhor pessoalmente? Que tal um caf√©?" },
    { tipo: 'ela', mensagem: "Seria legal! Quando voc√™ est√° livre?" },
    { tipo: 'ele', mensagem: "Que tal no final de semana? Conhece algum lugar legal?" },
    { tipo: 'ela', mensagem: "Conhe√ßo sim! Tem uma cafeteria √≥tima no [local]. S√°bado de tarde te serve?" },
    { tipo: 'ele', mensagem: "Perfeito! Me passa seu n√∫mero para combinarmos os detalhes?" },
    { tipo: 'ela', mensagem: "Claro! √â (11) 99999-9999. At√© s√°bado! üòä" }
  ]
};

function App() {
  const [categoriaAtiva, setCategoriaAtiva] = useState(null);
  const [mensagemCopiada, setMensagemCopiada] = useState(null);
  const [conversaAtiva, setConversaAtiva] = useState(null);
  const [chatAssistente, setChatAssistente] = useState(false);
  const [conversaReal, setConversaReal] = useState('');
  const [sugestoes, setSugestoes] = useState([]);
  const [analisandoIA, setAnalisandoIA] = useState(false);
  const [fonteIA, setFonteIA] = useState('');
  const [configIA, setConfigIA] = useState(verificarConfiguracaoIA());
  const [imagemSelecionada, setImagemSelecionada] = useState(null);
  const [processandoImagem, setProcessandoImagem] = useState(false);

  // Estados para Chat IA Completo
  const [modoChat, setModoChat] = useState(false);
  const [historicoChat, setHistoricoChat] = useState([]);
  const [mensagemUsuario, setMensagemUsuario] = useState('');
  const [iaRespondendo, setIaRespondendo] = useState(false);

  const categorias = [
    { id: 'primeiras', emoji: 'üü¢', titulo: 'Primeiras Mensagens', descricao: 'Como iniciar uma conversa' },
    { id: 'elogios', emoji: 'üí¨', titulo: 'Mensagens de Elogio', descricao: 'Elogios sinceros e respeitosos' },
    { id: 'perguntas', emoji: 'üéØ', titulo: 'Perguntas de Interesse', descricao: 'Perguntas para conhecer melhor' },
    { id: 'quebragelo', emoji: 'üòÇ', titulo: 'Quebras de Gelo Engra√ßadas', descricao: 'Humor para descontrair' },
    { id: 'flertes', emoji: 'üíû', titulo: 'Flertes Leves', descricao: 'Flertes sutis e charmosos' },
    { id: 'encerrar', emoji: 'üö´', titulo: 'Mensagens para Encerrar com Classe', descricao: 'Como encerrar respeitosamente' },
    { id: 'assistente', emoji: 'ü§ñ', titulo: 'Chat Assistente IA', descricao: 'Cole sua conversa e receba sugest√µes com IA' },
    { id: 'chatia', emoji: 'üí¨', titulo: 'Chat IA Completo', descricao: 'Converse com a IA como especialista em relacionamentos' }
  ];

  const copiarMensagem = (mensagem, index) => {
    navigator.clipboard.writeText(mensagem);
    setMensagemCopiada(index);
    setTimeout(() => setMensagemCopiada(null), 2000);
  };

  const voltarMenu = () => {
    setCategoriaAtiva(null);
    setConversaAtiva(null);
    setChatAssistente(false);
    setConversaReal('');
    setSugestoes([]);
    setAnalisandoIA(false);
    setFonteIA('');
    setImagemSelecionada(null);
    setProcessandoImagem(false);
    setModoChat(false);
    setHistoricoChat([]);
    setMensagemUsuario('');
    setIaRespondendo(false);
  };

  const voltarMensagens = () => {
    setConversaAtiva(null);
  };

  const verExemplo = (mensagem) => {
    const conversa = exemploConversa[mensagem] || exemploConversa["generico"];
    // Substitui a primeira mensagem gen√©rica pela mensagem escolhida
    if (conversa === exemploConversa["generico"]) {
      conversa[0].mensagem = mensagem;
    }
    setConversaAtiva(conversa);
  };

  const abrirChatAssistente = () => {
    setChatAssistente(true);
    setCategoriaAtiva('assistente');
    setConfigIA(verificarConfiguracaoIA());
  };

  const abrirChatIA = () => {
    setModoChat(true);
    setCategoriaAtiva('chatia');
    setConfigIA(verificarConfiguracaoIA());
    
    // Mensagem de boas-vindas da IA
    const boasVindas = {
      autor: 'IA',
      texto: "üëã Ol√°! Sou sua especialista em relacionamentos. Pode me perguntar qualquer coisa sobre conquista, conversas, relacionamentos ou dating. Como posso te ajudar hoje?",
      timestamp: Date.now()
    };
    
    setHistoricoChat([boasVindas]);
  };

  const enviarMensagemParaIA = async () => {
    if (!mensagemUsuario.trim() || iaRespondendo) return;

    const mensagemUser = {
      autor: 'Usu√°rio',
      texto: mensagemUsuario.trim(),
      timestamp: Date.now()
    };

    const novoHistorico = [...historicoChat, mensagemUser];
    setHistoricoChat(novoHistorico);
    setMensagemUsuario('');
    setIaRespondendo(true);

    try {
      const resultado = await conversarComIA(novoHistorico);
      
      if (resultado.sucesso) {
        const respostaIA = {
          autor: 'IA',
          texto: resultado.resposta,
          timestamp: Date.now()
        };
        
        setHistoricoChat(prev => [...prev, respostaIA]);
      } else {
        const respostaErro = {
          autor: 'IA',
          texto: "Desculpe, tive um problema t√©cnico. Pode reformular sua pergunta? Estou aqui para ajudar com relacionamentos e conquista! üòä",
          timestamp: Date.now()
        };
        
        setHistoricoChat(prev => [...prev, respostaErro]);
      }
    } catch (error) {
      console.error('Erro no chat IA:', error);
      const respostaErro = {
        autor: 'IA',
        texto: "Ops! Algo deu errado. Tente novamente! Estou aqui para te ajudar com suas d√∫vidas sobre relacionamentos. üí™",
        timestamp: Date.now()
      };
      
      setHistoricoChat(prev => [...prev, respostaErro]);
    } finally {
      setIaRespondendo(false);
    }
  };

  const limparChatIA = () => {
    const boasVindas = {
      autor: 'IA',
      texto: "üëã Ol√°! Sou sua especialista em relacionamentos. Pode me perguntar qualquer coisa sobre conquista, conversas, relacionamentos ou dating. Como posso te ajudar hoje?",
      timestamp: Date.now()
    };
    
    setHistoricoChat([boasVindas]);
  };

  const processarImagem = async (arquivo) => {
    if (!arquivo) return;

    setProcessandoImagem(true);
    setImagemSelecionada(arquivo);

    try {
      const resultado = await extrairTextoDeImagem(arquivo);
      
      if (resultado.sucesso) {
        setConversaReal(resultado.texto);
      } else {
        alert(resultado.erro || 'Erro ao processar imagem');
      }
    } catch (error) {
      alert('Erro ao processar a imagem. Tente novamente.');
    } finally {
      setProcessandoImagem(false);
    }
  };

  const handleImageUpload = (event) => {
    const arquivo = event.target.files[0];
    if (arquivo && arquivo.type.startsWith('image/')) {
      processarImagem(arquivo);
    } else {
      alert('Por favor, selecione uma imagem v√°lida.');
    }
  };

  const analisarConversaComIA = async () => {
    if (!conversaReal.trim()) return;
    
    setAnalisandoIA(true);
    setSugestoes([]);
    setFonteIA('');
    
    try {
      const resultado = await gerarSugestoesComIA(conversaReal);
      
      if (resultado.sucesso) {
        setSugestoes(resultado.sugestoes);
        setFonteIA(resultado.fonte);
      } else {
        // Fallback caso algo d√™ errado
        setSugestoes([
          "Ops! Algo deu errado. Tente novamente em alguns segundos.",
          "Verifique sua conex√£o e tente mais uma vez.",
          "Se o problema persistir, verifique as configura√ß√µes da IA."
        ]);
        setFonteIA('Erro');
      }
    } catch (error) {
      console.error('Erro ao analisar conversa:', error);
      setSugestoes([
        "Erro ao conectar com a IA. Usando an√°lise local.",
        "Verifique sua configura√ß√£o de API ou conex√£o de internet."
      ]);
      setFonteIA('Erro');
    } finally {
      setAnalisandoIA(false);
    }
  };

  const copiarSugestao = (sugestao, event) => {
    navigator.clipboard.writeText(sugestao);
    // Feedback visual melhorado
    const btn = event.target;
    const textoOriginal = btn.textContent;
    btn.textContent = '‚úÖ Copiado!';
    btn.style.background = '#28a745';
    
    setTimeout(() => {
      btn.textContent = textoOriginal;
      btn.style.background = '#28a745';
    }, 2000);
  };

  const limparImagem = () => {
    setImagemSelecionada(null);
    setConversaReal('');
    setSugestoes([]);
  };

  return (
    <div className="App">
      <div className="container">
        <header className="app-header">
          <h1> Domine a Arte da Conquista</h1>
          <p>Sua assistente inteligente para conversas aut√™nticas</p>
        </header>

        {modoChat ? (
          <div className="chat-ia-container">
            <div className="chat-ia-header">
              <button className="btn-voltar" onClick={voltarMenu}>
                ‚Üê Voltar ao Menu
              </button>
              <h2>üí¨ Chat IA Completo - Especialista em Relacionamentos</h2>
            </div>
            
            <div className="chat-ia-content">
              {!configIA.groqConfigured && (
                <div className="config-ia-aviso">
                  <h3>‚ö° Configure a IA Gratuita para Melhores Respostas!</h3>
                  <p>üéØ <strong>Recomendado:</strong> Configure a API Groq (100% gratuita):</p>
                  <ol>
                    <li>Acesse: <a href="https://console.groq.com/keys" target="_blank" rel="noopener noreferrer">https://console.groq.com/keys</a></li>
                    <li>Crie uma conta gratuita</li>
                    <li>Gere sua API Key</li>
                    <li>Cole no arquivo <code>.env</code> na pasta do projeto</li>
                  </ol>
                  <p>üìù <strong>Sem configura√ß√£o:</strong> O sistema usar√° an√°lise local (tamb√©m muito boa!)</p>
                </div>
              )}

              <div className="chat-ia-instrucoes">
                <h3>üí° Como usar o Chat IA:</h3>
                <div className="exemplos-perguntas">
                  <h4>üí¨ Exemplos de perguntas que voc√™ pode fazer:</h4>
                  <div className="exemplos-grid">
                    <div className="exemplo-card" onClick={() => setMensagemUsuario("Como iniciar uma conversa com uma mulher que nunca falei?")}>
                      "Como iniciar uma conversa com uma mulher que nunca falei?"
                    </div>
                    <div className="exemplo-card" onClick={() => setMensagemUsuario("Ela n√£o est√° respondendo minhas mensagens, o que fazer?")}>
                      "Ela n√£o est√° respondendo minhas mensagens, o que fazer?"
                    </div>
                    <div className="exemplo-card" onClick={() => setMensagemUsuario("Como chamar uma mulher para sair de forma natural?")}>
                      "Como chamar uma mulher para sair de forma natural?"
                    </div>
                    <div className="exemplo-card" onClick={() => setMensagemUsuario("Estou nervoso para o primeiro encontro, alguma dica?")}>
                      "Estou nervoso para o primeiro encontro, alguma dica?"
                    </div>
                  </div>
                </div>
              </div>

              <div className="chat-ia-historico">
                <div className="chat-ia-header-conversa">
                  <h4>üí¨ Conversa com a IA</h4>
                  <button onClick={limparChatIA} className="btn-limpar-chat">
                    üóëÔ∏è Limpar Chat
                  </button>
                </div>

                <div className="chat-ia-mensagens">
                  {historicoChat.map((msg, index) => (
                    <div key={index} className={`chat-ia-mensagem ${msg.autor.toLowerCase()}`}>
                      <div className="chat-ia-avatar">
                        {msg.autor === 'IA' ? 'ü§ñ' : 'üë§'}
                      </div>
                      <div className="chat-ia-conteudo">
                        <div className="chat-ia-autor">{msg.autor === 'IA' ? 'Especialista IA' : 'Voc√™'}</div>
                        <div className="chat-ia-texto">{msg.texto}</div>
                      </div>
                    </div>
                  ))}
                  
                  {iaRespondendo && (
                    <div className="chat-ia-mensagem ia">
                      <div className="chat-ia-avatar">ü§ñ</div>
                      <div className="chat-ia-conteudo">
                        <div className="chat-ia-autor">Especialista IA</div>
                        <div className="chat-ia-digitando">
                          <span>Pensando na melhor resposta</span>
                          <div className="typing-dots">
                            <span></span>
                            <span></span>
                            <span></span>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              <div className="chat-ia-input">
                <div className="input-chat-container">
                  <textarea
                    value={mensagemUsuario}
                    onChange={(e) => setMensagemUsuario(e.target.value)}
                    placeholder="Digite sua pergunta sobre relacionamentos, conquista, dating..."
                    className="textarea-chat-ia"
                    rows={3}
                    onKeyPress={(e) => {
                      if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        enviarMensagemParaIA();
                      }
                    }}
                  />
                  <button 
                    onClick={enviarMensagemParaIA}
                    className="btn-enviar-chat"
                    disabled={!mensagemUsuario.trim() || iaRespondendo}
                  >
                    {iaRespondendo ? 'üîÑ' : 'üì§'}
                  </button>
                </div>
                <p className="dica-chat">üí° Pressione Enter para enviar ou Shift+Enter para quebrar linha</p>
              </div>
            </div>
          </div>
        ) : chatAssistente ? (
          <div className="chat-assistente-container">
            <div className="chat-assistente-header">
              <button className="btn-voltar" onClick={voltarMenu}>
                ‚Üê Voltar ao Menu
              </button>
              <h2>ü§ñ Chat Assistente com IA</h2>
            </div>
            
            <div className="chat-assistente-content">
              {!configIA.groqConfigured && (
                <div className="config-ia-aviso">
                  <h3>‚ö° Configure a IA Gratuita para Respostas Mais Precisas!</h3>
                  <p>üéØ <strong>Recomendado:</strong> Configure a API Groq (100% gratuita) para respostas contextualmente perfeitas:</p>
                  <ol>
                    <li>Acesse: <a href="https://console.groq.com/keys" target="_blank" rel="noopener noreferrer">https://console.groq.com/keys</a></li>
                    <li>Crie uma conta gratuita</li>
                    <li>Gere sua API Key</li>
                    <li>Cole no arquivo <code>.env</code> na pasta do projeto</li>
                  </ol>
                  <p>üìù <strong>Sem configura√ß√£o:</strong> O sistema usar√° an√°lise local inteligente (tamb√©m muito boa!)</p>
                </div>
              )}
              
              <div className="instrucoes">
                <h3>üìã Como usar:</h3>
                <ol>
                  <li>üì∏ <strong>Envie uma imagem</strong> (print da conversa) OU cole o texto</li>
                  <li>ü§ñ Clique em "Analisar com IA"</li>
                  <li>üí° Receba sugest√µes {configIA.groqConfigured ? 'com IA Groq' : 'com an√°lise inteligente'}</li>
                  <li>üìã Copie e adapte as sugest√µes para seu estilo</li>
                </ol>
              </div>

              <div className="upload-section">
                <h4>üì∏ Enviar Print da Conversa:</h4>
                <div className="upload-container">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="input-imagem"
                    id="upload-imagem"
                    disabled={processandoImagem}
                  />
                  <label htmlFor="upload-imagem" className={`btn-upload ${processandoImagem ? 'processando' : ''}`}>
                    {processandoImagem ? (
                      <span>üîÑ Processando imagem...</span>
                    ) : (
                      <span>üì∏ Selecionar Imagem</span>
                    )}
                  </label>
                  
                  {imagemSelecionada && (
                    <div className="imagem-preview">
                      <img 
                        src={URL.createObjectURL(imagemSelecionada)} 
                        alt="Preview da conversa"
                        className="preview-img"
                      />
                      <button onClick={limparImagem} className="btn-remover">
                        ‚ùå Remover
                      </button>
                    </div>
                  )}
                </div>
                <p className="dica-upload">üí° Tire um print da conversa no WhatsApp, Instagram, Tinder, etc.</p>
              </div>
              
              <div className="conversa-input">
                <h4>üí¨ Ou cole sua conversa aqui:</h4>
                <textarea
                  value={conversaReal}
                  onChange={(e) => setConversaReal(e.target.value)}
                  placeholder="Exemplo:
Ela: Oi! Como foi seu dia?
Voc√™: Foi legal! E o seu?
Ela: Foi corrido no trabalho, mas agora t√¥ relaxando üòä
Voc√™: [aguardando sugest√£o...]"
                  rows={8}
                  className="textarea-conversa"
                />
                
                <button 
                  onClick={analisarConversaComIA}
                  className="btn-analisar"
                  disabled={!conversaReal.trim() || analisandoIA}
                >
                  {analisandoIA ? (
                    <span>üîÑ Analisando...</span>
                  ) : (
                    <span>ü§ñ Analisar com IA</span>
                  )}
                </button>
              </div>
              
              {sugestoes.length > 0 && (
                <div className="sugestoes-container">
                  <div className="sugestoes-header">
                    <h4>üí° Sugest√µes geradas:</h4>
                    <span className="fonte-ia">
                      üì° {fonteIA} {configIA.groqConfigured && fonteIA === 'Groq AI' ? '‚ö°' : 'üîß'}
                    </span>
                  </div>
                  <div className="sugestoes-lista">
                    {sugestoes.map((sugestao, index) => (
                      <div key={index} className="sugestao-card">
                        <p>{sugestao}</p>
                        <button 
                          onClick={(event) => copiarSugestao(sugestao, event)}
                          className="btn-copiar-sugestao"
                        >
                          üìã Copiar
                        </button>
                      </div>
                    ))}
                  </div>
                  
                  <div className="dica-sugestoes">
                    <p>üí° <strong>Dica:</strong> Adapte as sugest√µes para sua personalidade e contexto da conversa!</p>
                    {fonteIA === 'An√°lise Local Inteligente' && (
                      <p>‚ö° <strong>Upgrade:</strong> Configure a API Groq para respostas ainda mais precisas!</p>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        ) : conversaAtiva ? (
          <div className="conversa-container">
            <div className="conversa-header">
              <button className="btn-voltar" onClick={voltarMensagens}>
                ‚Üê Voltar √†s Mensagens
              </button>
              <h2>üí¨ Exemplo de Conversa Completa</h2>
            </div>
            
            <div className="conversa-chat">
              {conversaAtiva.map((msg, index) => (
                <div key={index} className={`mensagem-chat ${msg.tipo}`}>
                  <div className="avatar">
                    {msg.tipo === 'ele' ? 'üë®' : 'üë©'}
                  </div>
                  <div className="mensagem-texto">
                    <span className="nome">{msg.tipo === 'ele' ? 'Voc√™' : 'Ela'}</span>
                    <p>{msg.mensagem}</p>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="conversa-footer">
              <p>üí° <strong>Resultado:</strong> Encontro marcado com sucesso! üéâ</p>
              <p>üìù <strong>Dica:</strong> Adapte o exemplo para sua personalidade e contexto real.</p>
            </div>
          </div>
        ) : !categoriaAtiva ? (
          <div className="menu-categorias">
            <h2>Escolha uma categoria:</h2>
            <div className="categorias-grid">
              {categorias.map((categoria) => (
                <button
                  key={categoria.id}
                  className="categoria-card"
                  onClick={() => {
                    if (categoria.id === 'assistente') {
                      abrirChatAssistente();
                    } else if (categoria.id === 'chatia') {
                      abrirChatIA();
                    } else {
                      setCategoriaAtiva(categoria.id);
                    }
                  }}
                >
                  <div className="categoria-emoji">{categoria.emoji}</div>
                  <h3>{categoria.titulo}</h3>
                  <p>{categoria.descricao}</p>
                </button>
              ))}
            </div>
          </div>
        ) : (
          <div className="mensagens-container">
            <div className="categoria-header">
              <button className="btn-voltar" onClick={voltarMenu}>
                ‚Üê Voltar ao Menu
              </button>
              <h2>
                {categorias.find(c => c.id === categoriaAtiva)?.emoji}{' '}
                {categorias.find(c => c.id === categoriaAtiva)?.titulo}
              </h2>
            </div>
            
            <div className="mensagens-lista">
              {mensagensData[categoriaAtiva]?.map((mensagem, index) => (
                <div key={index} className="mensagem-card">
                  <p>{mensagem}</p>
                  <div className="mensagem-acoes">
                    <button
                      className={`btn-copiar ${mensagemCopiada === index ? 'copiado' : ''}`}
                      onClick={() => copiarMensagem(mensagem, index)}
                    >
                      {mensagemCopiada === index ? '‚úì Copiado!' : 'üìã Copiar'}
                    </button>
                    <button
                      className="btn-exemplo"
                      onClick={() => verExemplo(mensagem)}
                    >
                      üí¨ Ver Exemplo
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        <footer className="app-footer">
          <p>üí° Dica: Sempre seja respeitoso, aut√™ntico e genu√≠no em suas conversas!</p>
        </footer>
      </div>
    </div>
  );
}

export default App;
